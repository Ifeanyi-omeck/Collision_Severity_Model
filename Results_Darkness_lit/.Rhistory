write.csv(log_likelihood_df, file = paste0("LogLikelihood_", file_suffix, ".csv"), row.names = FALSE)
}
# Return values for the ordered Probit model for comparison
compute_AIC_BIC_LL(final_op_darklit, "Op_model_darklit")
# Calculate AIC, BIC and Log Likelihood for the zero inflated Ordered Probit Model(ZIOP Model)
calculate_AIC_BIC_LL_ZIOP <- function(model, n ){
# Run the function for calculating AIC and BIC first before running this function
estimates <- calculate_AIC_BIC(model = model , n = n)  # Custom code that calculates AIC and BIC for the ZIOP MODEL
ZIOP_AIC <- estimates$AIC
print(paste("AIC:",  ZIOP_AIC))
ZIOP_BIC <- estimates$BIC
ZIOP_BIC
print(paste("BIC:",  ZIOP_BIC))
ZIOP_Log_likelihood <- model$ll
ZIOP_Log_likelihood
print(paste("Likelihood:",  ZIOP_Log_likelihood))
# Create data frames for AIC, BIC, and log-likelihood values
aic_df_ziop <- data.frame(AIC = ZIOP_AIC)
bic_df_ziop <- data.frame(BIC = ZIOP_BIC)
log_likelihood_df_ziop <- data.frame(LogLikelihood = ZIOP_Log_likelihood)
# Save the data frames to separate CSV files with the specified file_suffix
write.csv(aic_df_ziop, file = paste0("AIC_", "Ziop_model_darklit", ".csv"), row.names = FALSE)
write.csv(bic_df_ziop, file = paste0("BIC_", "Ziop_model_darklit", ".csv"), row.names = FALSE)
write.csv(log_likelihood_df_ziop, file = paste0("LogLikelihood_darklit_", "Ziop_model", ".csv"), row.names = FALSE)
}
# Return values for Zero inflated Ordered Probit model for Comparison
calculate_AIC_BIC_LL_ZIOP(ziop_third_darklit, 5015)
# Function to calculate AIC and BIC for a custom zero-inflated model
calculate_AIC_BIC <- function(model, n) {
# Model: Pass Custom Zero-inflated model component
# n: Total number of observations in the model
nll <- model$ll  #  log-likelihood
num_parameters <- sum(sapply(model$coefficients, length))  # Number of estimated parameters
AIC <- -2 * nll + 2 * num_parameters
BIC <- -2 * nll + log(n) * num_parameters
return(list(AIC = AIC, BIC = BIC))
}
# Return values for Zero inflated Ordered Probit model for Comparison
calculate_AIC_BIC_LL_ZIOP(ziop_two_daylight, 5015)
summary(ziop_two_darkness)
# Return values for Zero inflated Ordered Probit model for Comparison
calculate_AIC_BIC_LL_ZIOP(ziop_third_darklit, 5015)
# Return values for the ordered Probit model for comparison
compute_AIC_BIC_LL(final_op_darklit, "Op_model_darklit")
# Calculate the Probabilites to used in the Vuong Test
calculate_probabilities <- function(model, data){
# Extract the explanatory variables for the ordered component from the data
ordered_var <- data[, colnames(model$x)]
# Get the column names from the inflation component of the model
col_names <- colnames(model$z)
# Clean the column names by removing the 'inflation.' prefix
formatted_col_names <- gsub("inflation.", "", col_names)
# Exclude 'Intercept' from the column names
formatted_col_names <- setdiff(formatted_col_names, "Intercept")
# Extract the intercept from the inflation component of the model
intercept <- unique(model$z[1])
# Construct the 'inflated_data' dataframe using selected columns
# Add a new column 'intercept' with repeated values from the model's intercept
inflated_data <- data[, formatted_col_names, drop = FALSE]
inflated_data$intercept <- rep(intercept,  nrow(inflated_data))
# Reorder columns in 'inflated_data' to place 'intercept' first
inflated_data <- inflated_data[, c("intercept", setdiff(names(inflated_data), "intercept"))]
# Convert the 'intercept' column values to integer
inflated_data$intercept <- unlist(inflated_data$intercept)
inflated_data$intercept <- as.integer(inflated_data$intercept)
# Calculate the product of the 'inflated_data' and model's inflation coefficients
# This is the 'infla' part of the model's probability calculations
inflation_result <- as.matrix(inflated_data) %*% model$coefficients$inflation
# Calculate the product of the 'ordered_var' and model's ordered coefficients
# This is the 'ordered' part of the model's probability calculations
ordered_result <- as.matrix(ordered_var) %*% model$coefficients$ordered
# Prepare cut-point probabilities matrix(i,e thresholds which determines the position of
#the ordered variable)
cutpoint_probs <- matrix(nrow=model$y.categories-1,ncol=1)
# Get number of rows in inflated_data
num_rows <- nrow(inflated_data)
# Prepare probabilities matrix
probabilities <- matrix(nrow=num_rows,ncol=model$y.categories)
cutpoint_probs[1,1] <- model$coefficients$cutpoints[1]
# Calculate cutpoint probabilities
for(j in 2:(model$y.categories-1)){
cutpoint_probs[j,1] <- cutpoint_probs[j-1,1] + exp(model$coefficients$cutpoints[j])
}
# Calculate the last and first categories
probabilities[,model$y.categories] <- (pnorm(inflation_result)) * (1 - pnorm(cutpoint_probs[model$y.categories-1,1] - ordered_result))
probabilities[,1] <- (1 - pnorm(inflation_result)) + (pnorm(inflation_result)) * pnorm(cutpoint_probs[1,1] - ordered_result)
# Calculate intermediate categories
for(j in 2:(model$y.categories-1)){
probabilities[,j] <- (pnorm(inflation_result)) * ((pnorm(cutpoint_probs[j,1] - ordered_result)) - (pnorm(cutpoint_probs[j-1,1] - ordered_result)))
}
# Set column names of the probabilities matrix
colnames(probabilities) <- paste("Pr(Y=", sort(unique(model$y)), ")", sep="")
return(probabilities)
}
vuong_test <- function(trad_ordinal_model,  ZIOP_model, data) {
# Voung test for comparing the Traditional Ordered Probit model and the Zero-Inflated Ordered Probit model.
# trad_ordinal_model: Traditional Ordered Probit model.
# ZIOP_model: Zero-Inflated Ordered Probit model.
# Extracting the length of the data.
len1 <- trad_ordinal_model$n
# Extracting response variables and explanatory variables from the data.
y <- data$recoded_severity  #Manually input this into this function
x <- data[, colnames(ZIOP_model$x)] #
# Initializing a new floating points array for the thresholds of the Traditional Ordered Probit model.
float_threshold <- rep(0, length(unname(trad_ordinal_model$alpha)))
# Grab the coefficients of the model excluding the cut-points in the Traditional Ordered Probit model.
trad_coefs <- unname(trad_ordinal_model$beta)
# Removing names from the threshold arrays
float_threshold <- unname(trad_ordinal_model$alpha)
# Instantiate a model matrix for the explanatory variables.
x_variable <- matrix(nrow = len1, ncol = ncol(x))
# Populate the model matrix using element-wise multiplication between
# explanatory variables in the zero-inflated model and estimates from the Traditional Ordered Probit model.
for (j in 1:ncol(x)) {
x_variable[, j] <- trad_coefs[j] * x[, j]
}
# Calculate the row sums of the model matrix.
x_variable_sum <- rowSums(x_variable)
# Extracting predicted probabilities from the zero-inflated model
# This a function for calculating probabilities(Written above this one)
predict_prob <- calculate_probabilities(model = ZIOP_model, data = data)
# Converting response variable to factor and extracting unique categories.
y_factor <- as.factor(y)
unique_categories <- unique(y_factor)
num_categories <- length(unique_categories)
sorted_categories <- sort(unique_categories)
# Creating a matrix to store indicator variables for each category.
# v: Matrix of indicator variables to represent each category of the response variable 'y'.
# Each column of 'v' corresponds to a distinct category, and each row represents an observation.
# If an observation belongs to a certain category, the corresponding element in that column is set to TRUE (1); otherwise, it is set to FALSE (0).
v <- matrix(0, nrow = len1, ncol = num_categories)
for (j in 1:num_categories) {
v[, j] <- y == sorted_categories[j]
}
# m: A numeric vector initialized with zeros to store the calculated probabilities for each observation.
m <- rep(0, len1)
# probs: A matrix to store the probabilities of each observation belonging to each category.
# The first column (probs[, 1]) represents the probabilities of being in the first category,
# and the last column (probs[, num_categories]) represents the probabilities of being in the last category.
probs <- matrix(0, nrow = len1, ncol = num_categories)
# Calculating the probability of being in the first category.
probs[, 1] <- pnorm(float_threshold[[1]] - x_variable_sum) / predict_prob[, 1]
# Calculating the probability of being in the last category.
probs[, num_categories] <- (1 - pnorm(float_threshold[num_categories - 1] - x_variable_sum)) / predict_prob[, num_categories]
# Calculating the probabilities of being in the intermediate categories.
for (i in 2:(num_categories - 1)) {
probs[, i] <- (pnorm(float_threshold[i] - x_variable_sum) - pnorm(float_threshold[i - 1] - x_variable_sum)) / predict_prob[, i]
}
# Calculating the weighted probabilities for each observation and category.
m <- matrix(0, nrow = len1, ncol = num_categories)
for (k in 1:len1) {
for (j in 1:num_categories) {
m[k, j] <- v[k, j] * probs[k, j]
}
}
# Removing no zero values
m[m[,1] == 0, 1] <- apply(m[m[,1] == 0,], 1, function(x) x[x!=0][1])
# Now keep only the first column
m2 <- m[ , 1, drop = FALSE]
# Calculating the log-likelihood for each observation and category.
mlog <- log(m2)
diffmsq <- (mlog - mean(mlog)) **2
sumdms <- sum(diffmsq)
# Calculating the Vuong test statistic.
numerator = sqrt(len1) * ((1/len1) * sum(mlog))
denominator =  sqrt((1 / len1) * sumdms)
vuong_test <- numerator / denominator
#Returning the Vuong test
return(vuong_test)
}
summary(ziop_third_darklit)
# Return values for the ordered Probit model for comparison
compute_AIC_BIC_LL(final_op_darklit, "Op_model_darklit")
# Return values for Zero inflated Ordered Probit model for Comparison
calculate_AIC_BIC_LL_ZIOP(ziop_third_darklit, 5015)
####################################################################################################################################################
# Calculating the Vuong test and Marginal effect for the Zero inflated Ordered Probit Model.
# The Vuong test score between the Ordered Probit model and the Zero Inflated Ordered Probit Model.
# Storing the results in a csv file
voung_result <- vuong_test(final_op_darklit, ziop_third_darklit, prep_data) # A custom code that calculates the Vuong test.
voung_result_df <- data.frame(voung_result)
write.csv(voung_result_df, 'vuong_test_result_darklit.csv', row.names = FALSE)
voung_result
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
# Function to calculate average marginal effects for a Zero-Inflated Ordered Probit (ZIOP) model
marginal_effect_ordered <- function(ZIOP_MODEL, data, rho) {
response_variable <- length(unique(ZIOP_MODEL$y))
# Extract the ordered Probit coefficients from the ZIOP model
ordered_estimates <- unname(ZIOP_MODEL$coefficients$ordered)
# Extract the inflation coefficients from the ZIOP model, excluding the intercept
infl_estimates <- unname(ZIOP_MODEL$coefficients$inflation[-1])
intercept_term <- unname(ZIOP_MODEL$coefficients$inflation[1])
# Extracting coefficient common to both part of the model
#unique_val <- c(Gamma, Beta)
# xi represents the variables used in the ordered component of the ZIOP model
x_variables <- as.matrix(data[, colnames(ZIOP_MODEL$x)])
col_names_x <- colnames(ZIOP_MODEL$x)
# Get column names from the ZIOP model's inflation variables
col_names_z <- colnames(ZIOP_MODEL$z)
# Clean the column names by removing the 'inflation.' prefix
col_names_z <- gsub("inflation.", "", col_names_z)
# Remove the first element from the column names vector, which is the intercept term
col_names_z <- col_names_z[-1]
# Extract inflation variables from the data using the cleaned column names and convert to a matrix
z_variables <- as.matrix(data[, col_names_z])
# Extracting the levels of severity in the in the model
J_levels_ordered <- unique(ZIOP_MODEL$y)
# Create the formula for the model ordered section of the model
form_x  <- paste("~ 1", paste("+", col_names_x, collapse = " "), collapse = " ")
# Create the formula for the Binary Probit section of the model
form_z  <- paste("~ 1", paste("+", col_names_z, collapse = " "), collapse = " ")
# Generate the design matrix for the model. Excluding the intercept.
x_lin <- model.matrix(as.formula(form_x), data = data)[, -1]
z_lin <- model.matrix(as.formula(form_z), data = data)[, -1]
# since Marginal effects could be  calculated at the mean of the independent variables(joint mean of the covariates)
# The mean of independent variables for both the Binary and Ordered probit are calculated.
# The Author chose to calculate the Marginal effect at the join mean of the covariates below.
x_mean <- as.matrix(colMeans(x_lin))
γ_mean <- as.matrix(colMeans(z_lin))
# Calculate XB and zγ by multiplying the mean and model estimates
xb <- t(x_mean) %*% ordered_estimates
zγ <- t(γ_mean) %*% infl_estimates
# assign  X* and γ* to a variable. They include coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations.
# Extracting coefficients
ordered_coefs <- ZIOP_MODEL$coefficients$ordered
inflation_coefs <- ZIOP_MODEL$coefficients$inflation[-1]
# Finding unique and common variable names
common_vars_names <- intersect(names(ordered_coefs), names(inflation_coefs))
unique_ordered_vars_names <- setdiff(names(ordered_coefs), common_vars_names)
unique_inflation_vars_names <- setdiff(names(inflation_coefs), common_vars_names)
# Populate x_asteric and γ_asteric lists based on the unique and common variables
x_asteric <- list()
γ_asteric <- list()
# Looping through the variables to find unique or common variables for x* AND  γ*
if (length(unique_ordered_vars_names) > 0 || length(unique_inflation_vars_names) > 0) {
# For ordered_coefs
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
x_asteric[unique_ordered_vars_names] <- ordered_coefs[unique_ordered_vars_names]
# For inflation_coefs
γ_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
γ_asteric[unique_inflation_vars_names] <- inflation_coefs[unique_inflation_vars_names]
} else {
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
γ_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
}
# Removing the inflation.name(ie. inflation.age hence making it just age)
names(γ_asteric) <- gsub("inflation.", "", names(γ_asteric))
#Converting list to Matix for allow for multiplication and transposing them
x_asteric_mat <- as.matrix(unlist(x_asteric))
x_asteric_mat <- t(x_asteric_mat)
γ_asteric_mat <- as.matrix(unlist(γ_asteric))
γ_asteric_mat  <- t(γ_asteric_mat)
# Extract the cut-points (threshold parameters) from the ZIOP model
alpha <-  summary(ZIOP_MODEL)$coefficients[grep("^cut", rownames(summary(ZIOP_MODEL)$coefficients)), "Estimate"]
alpha <- c(-10^6, alpha, 10^6)  # Set lower and upper bounds for the cut-points
# Calculating the Marginal effects for the Zero inflated Ordered Probit Model
binary_prob <- (pnorm((alpha[2:(response_variable + 1)] - c(xb) + c(rho * zγ)) / sqrt(1 - rho^2)) -
pnorm((alpha[1:response_variable] - c(xb) + c(rho * zγ)) / sqrt(1 - rho^2))) * dnorm(c(zγ))
ordered_prob <- pnorm((c(zγ + rho) * (alpha[1:response_variable] -c(xb))) / sqrt(1 - rho^2)) * dnorm(alpha[1:response_variable] - c(xb)) -
pnorm((c(zγ + rho) * (alpha[2:(response_variable + 1)] - c(xb))) / sqrt(1 - rho^2))  * dnorm(alpha[2:(response_variable + 1)] - c(xb))
# Multiply by X* and γ* which represents coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations
binary_probit_effect <- as.vector(γ_asteric_mat) %*% matrix(data =  binary_prob, nrow = 1)
ordered_probit_effect <- as.vector(x_asteric_mat) %*% matrix(data = ordered_prob, nrow = 1)
# Add the Marginal effect for both term one and term two
overall_marginal_effect <- binary_probit_effect + ordered_probit_effect
# Assign the row names and column to the binary and Ordered probit section of the returned data.,
# Passing variables to a data frame.
binary_probit_effect <- as.data.frame(binary_probit_effect)
ordered_probit_effect<- as.data.frame(ordered_probit_effect)
overall_marginal_effect <- as.data.frame(overall_marginal_effect)
row.names(binary_probit_effect) <- col_names_z
row.names(ordered_probit_effect) <- col_names_x
# remaining the columns for the Ordered probit section.
colnames(ordered_probit_effect)[colnames(ordered_probit_effect) %in% c("V1", "V2", "V3")] <- c("Minor Injury",
"Serious Injury", "Fatal Injury")
# Return various Marginal effect component
return(list(Binary_Probit = binary_probit_effect, Ordered_Probit = ordered_probit_effect,
Overall_effect = overall_marginal_effect))
}
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
ziop_marginal_result_df <- data.frame(ziop_marginal_result$Ordered_Probit)
write.csv(ziop_marginal_result_df, 'ziop_marginal_result_darklit.csv', row.names = FALSE)
ziop_marginal_result_df
# Function to calculate average marginal effects for a Zero-Inflated Ordered Probit (ZIOP) model
marginal_effect_ordered <- function(ZIOP_MODEL, data, rho) {
response_variable <- length(unique(ZIOP_MODEL$y))
# Extract the ordered Probit coefficients from the ZIOP model
ordered_estimates <- unname(ZIOP_MODEL$coefficients$ordered)
# Extract the inflation coefficients from the ZIOP model, excluding the intercept
infl_estimates <- unname(ZIOP_MODEL$coefficients$inflation[-1])
intercept_term <- unname(ZIOP_MODEL$coefficients$inflation[1])
# Extracting coefficient common to both part of the model
#unique_val <- c(Gamma, Beta)
# xi represents the variables used in the ordered component of the ZIOP model
x_variables <- as.matrix(data[, colnames(ZIOP_MODEL$x)])
col_names_x <- colnames(ZIOP_MODEL$x)
# Get column names from the ZIOP model's inflation variables
col_names_z <- colnames(ZIOP_MODEL$z)
# Clean the column names by removing the 'inflation.' prefix
col_names_z <- gsub("inflation.", "", col_names_z)
# Remove the first element from the column names vector, which is the intercept term
col_names_z <- col_names_z[-1]
# Extract inflation variables from the data using the cleaned column names and convert to a matrix
z_variables <- as.matrix(data[, col_names_z])
# Extracting the levels of severity in the in the model
J_levels_ordered <- unique(ZIOP_MODEL$y)
# Create the formula for the model ordered section of the model
form_x  <- paste("~ 1", paste("+", col_names_x, collapse = " "), collapse = " ")
# Create the formula for the Binary Probit section of the model
form_z  <- paste("~ 1", paste("+", col_names_z, collapse = " "), collapse = " ")
# Generate the design matrix for the model. Excluding the intercept.
x_lin <- model.matrix(as.formula(form_x), data = data)[, -1]
z_lin <- model.matrix(as.formula(form_z), data = data)[, -1]
# since Marginal effects could be  calculated at the mean of the independent variables(joint mean of the covariates)
# The mean of independent variables for both the Binary and Ordered probit are calculated.
# The Author chose to calculate the Marginal effect at the join mean of the covariates below.
x_mean <- as.matrix(colMeans(x_lin))
y_mean <- as.matrix(colMeans(z_lin))
# Calculate XB and z?? by multiplying the mean and model estimates
xb <- t(x_mean) %*% ordered_estimates
zy <- t(y_mean) %*% infl_estimates
# assign  X* and ??* to a variable. They include coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations.
# Extracting coefficients
ordered_coefs <- ZIOP_MODEL$coefficients$ordered
inflation_coefs <- ZIOP_MODEL$coefficients$inflation[-1]
# Finding unique and common variable names
common_vars_names <- intersect(names(ordered_coefs), names(inflation_coefs))
unique_ordered_vars_names <- setdiff(names(ordered_coefs), common_vars_names)
unique_inflation_vars_names <- setdiff(names(inflation_coefs), common_vars_names)
# Populate x_asteric and ??_asteric lists based on the unique and common variables
x_asteric <- list()
y_asteric <- list()
# Looping through the variables to find unique or common variables for x* AND  ??*
if (length(unique_ordered_vars_names) > 0 || length(unique_inflation_vars_names) > 0) {
# For ordered_coefs
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
x_asteric[unique_ordered_vars_names] <- ordered_coefs[unique_ordered_vars_names]
# For inflation_coefs
y_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
y_asteric[unique_inflation_vars_names] <- inflation_coefs[unique_inflation_vars_names]
} else {
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
y_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
}
# Removing the inflation.name(ie. inflation.age hence making it just age)
names(y_asteric) <- gsub("inflation.", "", names(y_asteric))
#Converting list to Matix for allow for multiplication and transposing them
x_asteric_mat <- as.matrix(unlist(x_asteric))
x_asteric_mat <- t(x_asteric_mat)
y_asteric_mat <- as.matrix(unlist(y_asteric))
y_asteric_mat  <- t(y_asteric_mat)
# Extract the cut-points (threshold parameters) from the ZIOP model
alpha <-  summary(ZIOP_MODEL)$coefficients[grep("^cut", rownames(summary(ZIOP_MODEL)$coefficients)), "Estimate"]
alpha <- c(-10^6, alpha, 10^6)  # Set lower and upper bounds for the cut-points
# Calculating the Marginal effects for the Zero inflated Ordered Probit Model
binary_prob <- (pnorm((alpha[2:(response_variable + 1)] - c(xb) + c(rho * zy)) / sqrt(1 - rho^2)) -
pnorm((alpha[1:response_variable] - c(xb) + c(rho * zy)) / sqrt(1 - rho^2))) * dnorm(c(zy))
ordered_prob <- pnorm((c(zy + rho) * (alpha[1:response_variable] -c(xb))) / sqrt(1 - rho^2)) * dnorm(alpha[1:response_variable] - c(xb)) -
pnorm((c(z?? + rho) * (alpha[2:(response_variable + 1)] - c(xb))) / sqrt(1 - rho^2))  * dnorm(alpha[2:(response_variable + 1)] - c(xb))
# Multiply by X* and ??* which represents coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations
binary_probit_effect <- as.vector(y_asteric_mat) %*% matrix(data =  binary_prob, nrow = 1)
ordered_probit_effect <- as.vector(x_asteric_mat) %*% matrix(data = ordered_prob, nrow = 1)
# Add the Marginal effect for both term one and term two
overall_marginal_effect <- binary_probit_effect + ordered_probit_effect
# Assign the row names and column to the binary and Ordered probit section of the returned data.,
# Passing variables to a data frame.
binary_probit_effect <- as.data.frame(binary_probit_effect)
ordered_probit_effect<- as.data.frame(ordered_probit_effect)
overall_marginal_effect <- as.data.frame(overall_marginal_effect)
row.names(binary_probit_effect) <- col_names_z
row.names(ordered_probit_effect) <- col_names_x
# remaining the columns for the Ordered probit section.
colnames(ordered_probit_effect)[colnames(ordered_probit_effect) %in% c("V1", "V2", "V3")] <- c("Minor Injury",
"Serious Injury", "Fatal Injury")
# Return various Marginal effect component
return(list(Binary_Probit = binary_probit_effect, Ordered_Probit = ordered_probit_effect,
Overall_effect = overall_marginal_effect))
}
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
ziop_marginal_result_df <- data.frame(ziop_marginal_result$Ordered_Probit)
write.csv(ziop_marginal_result_df, 'ziop_marginal_result_darklit.csv', row.names = FALSE)
ziop_marginal_result_df
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
# Example usage : Here Rho is set to zero since the ZIOP model assumes independence among the latent processes.
# For correlated disturbance include the Rho value which is normally within (-1 and 1).
effects <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0)
View(marginal_effect_ordered)
View(marginal_effect_ordered)
marginal_effect_ordered <- function(ZIOP_MODEL, data, rho) {
response_variable <- length(unique(ZIOP_MODEL$y))
# Extract the ordered Probit coefficients from the ZIOP model
ordered_estimates <- unname(ZIOP_MODEL$coefficients$ordered)
# Extract the inflation coefficients from the ZIOP model, excluding the intercept
infl_estimates <- unname(ZIOP_MODEL$coefficients$inflation[-1])
intercept_term <- unname(ZIOP_MODEL$coefficients$inflation[1])
# Extracting coefficient common to both part of the model
#unique_val <- c(Gamma, Beta)
# xi represents the variables used in the ordered component of the ZIOP model
x_variables <- as.matrix(data[, colnames(ZIOP_MODEL$x)])
col_names_x <- colnames(ZIOP_MODEL$x)
# Get column names from the ZIOP model's inflation variables
col_names_z <- colnames(ZIOP_MODEL$z)
# Clean the column names by removing the 'inflation.' prefix
col_names_z <- gsub("inflation.", "", col_names_z)
# Remove the first element from the column names vector, which is the intercept term
col_names_z <- col_names_z[-1]
# Extract inflation variables from the data using the cleaned column names and convert to a matrix
z_variables <- as.matrix(data[, col_names_z])
# Extracting the levels of severity in the in the model
J_levels_ordered <- unique(ZIOP_MODEL$y)
# Create the formula for the model ordered section of the model
form_x  <- paste("~ 1", paste("+", col_names_x, collapse = " "), collapse = " ")
# Create the formula for the Binary Probit section of the model
form_z  <- paste("~ 1", paste("+", col_names_z, collapse = " "), collapse = " ")
# Generate the design matrix for the model. Excluding the intercept.
x_lin <- model.matrix(as.formula(form_x), data = data)[, -1]
z_lin <- model.matrix(as.formula(form_z), data = data)[, -1]
# since Marginal effects could be  calculated at the mean of the independent variables(joint mean of the covariates)
# The mean of independent variables for both the Binary and Ordered probit are calculated.
# The Author chose to calculate the Marginal effect at the join mean of the covariates below.
x_mean <- as.matrix(colMeans(x_lin))
Y_mean <- as.matrix(colMeans(z_lin))
# Calculate XB and zY by multiplying the mean and model estimates
xb <- t(x_mean) %*% ordered_estimates
zY <- t(Y_mean) %*% infl_estimates
# assign  X* and Y* to a variable. They include coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations.
# Extracting coefficients
ordered_coefs <- ZIOP_MODEL$coefficients$ordered
inflation_coefs <- ZIOP_MODEL$coefficients$inflation[-1]
# Finding unique and common variable names
common_vars_names <- intersect(names(ordered_coefs), names(inflation_coefs))
unique_ordered_vars_names <- setdiff(names(ordered_coefs), common_vars_names)
unique_inflation_vars_names <- setdiff(names(inflation_coefs), common_vars_names)
# Populate x_asteric and Y_asteric lists based on the unique and common variables
x_asteric <- list()
Y_asteric <- list()
# Looping through the variables to find unique or common variables for x* AND  Y*
if (length(unique_ordered_vars_names) > 0 || length(unique_inflation_vars_names) > 0) {
# For ordered_coefs
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
x_asteric[unique_ordered_vars_names] <- ordered_coefs[unique_ordered_vars_names]
# For inflation_coefs
Y_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
Y_asteric[unique_inflation_vars_names] <- inflation_coefs[unique_inflation_vars_names]
} else {
x_asteric[common_vars_names] <- ordered_coefs[common_vars_names]
Y_asteric[common_vars_names] <- inflation_coefs[common_vars_names]
}
# Removing the inflation.name(ie. inflation.age hence making it just age)
names(Y_asteric) <- gsub("inflation.", "", names(Y_asteric))
#Converting list to Matix for allow for multiplication and transposing them
x_asteric_mat <- as.matrix(unlist(x_asteric))
x_asteric_mat <- t(x_asteric_mat)
Y_asteric_mat <- as.matrix(unlist(Y_asteric))
Y_asteric_mat  <- t(Y_asteric_mat)
# Extract the cut-points (threshold parameters) from the ZIOP model
alpha <-  summary(ZIOP_MODEL)$coefficients[grep("^cut", rownames(summary(ZIOP_MODEL)$coefficients)), "Estimate"]
alpha <- c(-10^6, alpha, 10^6)  # Set lower and upper bounds for the cut-points
# Calculating the Marginal effects for the Zero inflated Ordered Probit Model
binary_prob <- (pnorm((alpha[2:(response_variable + 1)] - c(xb) + c(rho * zY)) / sqrt(1 - rho^2)) -
pnorm((alpha[1:response_variable] - c(xb) + c(rho * zY)) / sqrt(1 - rho^2))) * dnorm(c(zY))
ordered_prob <- pnorm((c(zY + rho) * (alpha[1:response_variable] -c(xb))) / sqrt(1 - rho^2)) * dnorm(alpha[1:response_variable] - c(xb)) -
pnorm((c(zY + rho) * (alpha[2:(response_variable + 1)] - c(xb))) / sqrt(1 - rho^2))  * dnorm(alpha[2:(response_variable + 1)] - c(xb))
# Multiply by X* and Y* which represents coefficients associated not only with the variables included
# in either Binary or Ordered probit but also the common variables that appear in both equations
binary_probit_effect <- as.vector(Y_asteric_mat) %*% matrix(data =  binary_prob, nrow = 1)
ordered_probit_effect <- as.vector(x_asteric_mat) %*% matrix(data = ordered_prob, nrow = 1)
# Add the Marginal effect for both term one and term two
overall_marginal_effect <- binary_probit_effect + ordered_probit_effect
# Assign the row names and column to the binary and Ordered probit section of the returned data.,
# Passing variables to a data frame.
binary_probit_effect <- as.data.frame(binary_probit_effect)
ordered_probit_effect<- as.data.frame(ordered_probit_effect)
overall_marginal_effect <- as.data.frame(overall_marginal_effect)
row.names(binary_probit_effect) <- col_names_z
row.names(ordered_probit_effect) <- col_names_x
# renaming the columns for the Ordered probit section.
colnames(ordered_probit_effect)[colnames(ordered_probit_effect) %in% c("V1", "V2", "V3")] <- c("Minor Injury",
"Serious Injury", "Fatal Injury")
# Return various Marginal effect component
return(list(Binary_Probit = binary_probit_effect, Ordered_Probit = ordered_probit_effect,
Overall_effect = overall_marginal_effect))
}
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
ziop_marginal_result_df <- data.frame(ziop_marginal_result$Ordered_Probit)
write.csv(ziop_marginal_result_df, 'ziop_marginal_result_darklit.csv', row.names = FALSE)
ziop_marginal_result_df
# Marginal effect for the Zero inflated Ordered Probit Model
ziop_marginal_result <- marginal_effect_ordered(ziop_third_darklit, prep_data, rho = 0) # A custom code for Calculating Marginal effect.
ziop_marginal_result_df <- data.frame(ziop_marginal_result$Ordered_Probit)
write.csv(ziop_marginal_result_df, 'ziop_marginal_result_darklit.csv', row.names = FALSE)
ziop_marginal_result_df
rm(list = ls())
# Load the required packages for Zero inflated Ordered Probit model and the Ordinal Model.
library(zmiop)
library(ordinal)
# Set a seed for reproducibility
seed_value <- 123
set.seed(seed_value)
# Fitting model for the first iteration of the zero inflated ordered probit model for Day light.
# Load the prepared data set for modelling.
prep_data <- read.csv('final_dataset_darkness.csv')
